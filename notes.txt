txt v/s js extension
software (interpreter and compiler) vich syntax structure eh file de extenstion dekhda
te os based the syntax krda.

initally , js da software web browser nal c.  (je c diff to config for general)
now , software alg ve available va , es lye hun js backend te frontend te ve use hunde. not only frontend in browsers.

assi node js use kra ge (other are deno.js)       -> so download kte va
es nal assi baar baar browser te nai jva ge.

TERMINAL : 
    1) node -v nal version of node
    2) node test.js (filename with extension)  -> will be interpreted .
                                    (no compiler)
    3)je koi folder vich va like 01_basics/test.js eda

we used the github code space -> bro ne github te VS use kita
                    (as github and vs microsoft da othe ve mil jnda)
directly data github te. but commit stage push krna pena


js vich phele code and hun vich difference va
to use only newer version "use strict";

nonPrimitive vich Number , String , Boolean hege
primitive number , string , boolean hege

conversion vich type(var) eg_ Boolean(isLogged)


memory in js :      stack and heap are stored in memory (RAM)  -> ram nu general memory kehnde va.
initally lang like c , es vich memory reserve and free is done by programmer.
Now time , done like automatic garabage collection is used.

stack memory : primitive value goes here.
    u get copy of variable defined.
heap memory : non prim values goes here.
    u get reference of varaible defined.

sab variables store stack vich he va.(even used for non)
heap vich non prim 
The stack is typically used for managing function calls and local variables, while the heap is used for dynamic memory allocation.

stack primarily contains local variables, function call information, and control flow data.

Memory on the heap is not organized in a structured way like the stack ; it consists of scattered memory blocks of varying sizes.

+----------------+
| Stack Frame 1  |  <-- Top of stack
|----------------|
| Local Var 1    |
| Local Var 2    |
| ...            |
| Return Address |
+----------------+
| Stack Frame 2  |
|----------------|
| Local Var 1    |
| Local Var 2    |
| ...            |
| Return Address |
+----------------+
| ...            |
+----------------+

variable va size.
+----------------+
|   Allocated    |
|   Memory Block |
|                |
+----------------+
|   Allocated    |
|   Memory Block |
|                |
+----------------+
|   ...          |
|   ...          |
+----------------+

//datatype summary vich ve notes.



STRINGS :

